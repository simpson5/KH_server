/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-01-06 00:29:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class updatePassword_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String memberId = request.getParameter("memberId");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery-3.4.1.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("\tform [type=password]{\r\n");
      out.write("\twidth: 150px;\r\n");
      out.write("\theight: 20px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tdiv#updatePassword-container{\r\n");
      out.write("\t\tborder: 1px solid #35256b;\r\n");
      out.write("\t\theight: 455px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tdiv#updatePassword-container table {\r\n");
      out.write("\t\tmargin:0 auto; \r\n");
      out.write("\t\tpadding-top:120px;\r\n");
      out.write("\t\tborder-spacing: 20px;\r\n");
      out.write("\t\tfont-family: 'Nanum Gothic Coding', monospace;\r\n");
      out.write("\t}\r\n");
      out.write("\tdiv#updatePassword-container table tr:last-of-type td {\r\n");
      out.write("\t\t\ttext-align:center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\tform [type=submit]{\r\n");
      out.write("\t    border: 1px solid #35256b; \r\n");
      out.write("\t    background-color: #261049; \r\n");
      out.write("\t    color: white; \r\n");
      out.write("\t    margin-left:30px;\r\n");
      out.write("\t    margin-top:20px;\r\n");
      out.write("\t    width:100px;\r\n");
      out.write("\t    height:35px;\r\n");
      out.write("\t    font-size:12px;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tform [type=button]{\r\n");
      out.write("\t    border: 1px solid #35256b; \r\n");
      out.write("\t    background-color: #261049; \r\n");
      out.write("\t    color: white; \r\n");
      out.write("\t    margin-left:-1px;\r\n");
      out.write("\t    margin-top:-20px;\r\n");
      out.write("\t    width:100px;\r\n");
      out.write("\t    height:35px;\r\n");
      out.write("\t    font-size:12px;\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tform [type=submit]:hover{\r\n");
      out.write("\tcolor:#white; \r\n");
      out.write("\tbackground-color: black;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tform [type=button]:hover{ \r\n");
      out.write("\tcolor:#white; \r\n");
      out.write("\tbackground-color: black; \r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction password_validate() {\r\n");
      out.write("\t\tvar $pwd_new = $(\"#password_new\").val().trim();\r\n");
      out.write("\t\tvar $pwd_chk = $(\"#password_chk\").val().trim();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif($pwd_new != $pwd_chk) {\r\n");
      out.write("\t\t\talert(\"패스워드가 일치하지 않습니다.\");\r\n");
      out.write("\t\t\t$(\"#password_new\").select();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"updatePassword-container\">\r\n");
      out.write("\t\t<form name=\"updatePwdFrm\" action=\"");
      out.print(request.getContextPath());
      out.write("/member/updatePasswordEnd\" method=\"post\" >\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>현재 비밀번호</th>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"password\" name=\"password\" id=\"password\" required></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>변경할 비밀번호</th>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"password\" name=\"password_new\" id=\"password_new\" required>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>비밀번호 확인</th>\r\n");
      out.write("\t\t\t\t\t<td>\t\r\n");
      out.write("\t\t\t\t\t\t<input type=\"password\" id=\"password_chk\" required><br>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td colspan=\"2\">\r\n");
      out.write("\t\t\t\t\t\t<input type=\"submit\" onclick=\"return password_validate();\" value=\"변경\" />&nbsp;\r\n");
      out.write("\t\t\t\t\t\t<input type=\"button\" onclick=\"self.close();\" value=\"닫기\" />\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"memberId\" value=\"");
      out.print(memberId );
      out.write("\" />\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
